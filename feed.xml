<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://junho960913.github.io/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="https://junho960913.github.io/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2022-03-01T03:22:04+00:00</updated><id>https://junho960913.github.io/jekyll-theme-yat/feed.xml</id><title type="html">Jang’s Tech Blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Junho960913</name></author><entry><title type="html">if __name__ == “__main__” 의 이용</title><link href="https://junho960913.github.io/jekyll-theme-yat/python/algorithm/2022/02/28/mainnaim.html" rel="alternate" type="text/html" title="if __name__ == “__main__” 의 이용" /><published>2022-02-28T00:00:00+00:00</published><updated>2022-02-28T00:00:00+00:00</updated><id>https://junho960913.github.io/jekyll-theme-yat/python/algorithm/2022/02/28/mainnaim</id><content type="html" xml:base="https://junho960913.github.io/jekyll-theme-yat/python/algorithm/2022/02/28/mainnaim.html"><![CDATA[<p>​	파이썬 코드를 보다 보면 가끔 if __name__ == “__main__”: 의 조건문을 보게 되는데, 그 의미에 대해서 한 번 생각해보자. 먼저 __name__ 이라는 것은 인터프리터가 실행되기전 만들어 놓는 글로벌 변수이며, 그 변수의 값으로는 __main__ 혹은 모듈의 이름이 들어간다. (여기서 모듈이란 함수나 변수 또는 클래스를 모아 놓은 파일을 말하며, 모듈은 다른 파이썬 프로그램에서 import하여 사용할 수 있게끔 만든 파이썬 파일이라고도 할 수 있다.) 다시말해,  파이썬 인터프리터가 최초로 실행한 스크립트 파일의 __name__에는 __main__이 들어가며 모듈로써 실행되는 파일의 __name__에는 해당 모듈의 이름이 들어가는 것이다. 다음의 예를 통해서 이 말의 의미를 정확하게 이해할 수 있을 것이다.</p>

<p>먼저 하나의 파이썬 파일만 있는 경우만 생각해보도록 하자.</p>

<pre><code class="language-python:jaeyi">print('jaeyi.py의 __name__:', __name__)    # jaeyi.py의 __name__에 할당되어 있는 변수를 출력
</code></pre>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 실행 결과
jaeyi.py의 __name__: __main__
</code></pre></div></div>

<p>하나의 파이썬 파일을 실행시키면 해당 파일이 최초로 실행된 스크립트 파일이으로 해당 파일의 “__name__“의 값에는 __main__이 할당된다.</p>

<p>다음으로는 하나의 파이썬 파일(main.py)에서 다른 파이썬 파일(junho.py)을 import하는 경우를 살펴보도록 하자.</p>

<pre><code class="language-python:junho.py">print('junho 모듈 시작')
print('junho.py의 __name__:', __name__)    # junho.py의 __name__에 할당되어 있는 변수를 출력
print('junho 모듈 끝')
</code></pre>

<pre><code class="language-python:main.py">import junho # junho 모듈을 import

print('main.py의 __name__:', __name__)    # main.py의 __name__에 할당되어 있는 변수를 출력
</code></pre>

<p>위와 같이 두 개의 파이썬 파일을 만든 다음, main.py 내에서 junho 모듈을 import하고 main을 실행시키면 아래와 같은 결과가 나오게 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 실행 결과
junho 모듈 시작
junho.py의 __name__: junho
junho 모듈 끝
main.py의 __name__: __main__
</code></pre></div></div>

<p>위의 결과에서 처럼 최초로 실행한 파일의 __name__에는 __main__이 들어가고, 모듈로 import한 파일의 __name__에는 해당 모듈의 이름이 들어가는 것을 확인할 수 있다.</p>

<p>그렇다면 이러한 이해를 바탕으로 왜 if __name__ == “__main__”: 구문이 필요한지 살펴보도록 하자.</p>

<pre><code class="language-python:operations.py">def add(a,b):
    sum = a + b
    return sum
 
if __name__ == "__main__":
    print(add(10,20))
</code></pre>

<pre><code class="language-python:main.py">from operations import add

print(add(20,30))
</code></pre>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 실행 결과1: operations.py를 실행시킨 경우
30
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 실행 결과2: main.py를 실행시킨 경우
50
</code></pre></div></div>

<p>만약 위와 같은 두 개의 파이썬 파일이 있을 때, operations.py만 실행시키게 되면 add(10,20)의 결괏값 30을 출력하지만 main.py에서 operations을 import하여 사용하게 되면 operations.py내의 __name__은 더 이상 __main__이 아니기 때문에 if __name__ == “__main__”: 내의 함수를 실행시키지 않고 add(20,30)만 실행하여 50의 결과를 출력하게 된다.</p>

<p>​	이와 같이 if __name__ == “__main__”: 문은, 해당 파일이 처음 실행이 시작되는 파일일 경우에만 실행하고 import되어 모듈로써 사용될 때에는 실행되지 않도록 하고 싶은 동작이 있을 경우에 이용하도록 한다.</p>]]></content><author><name>Junho960913</name></author><category term="Python" /><category term="Algorithm" /><category term="Python" /><category term="Algorithm" /><summary type="html"><![CDATA[​ 파이썬 코드를 보다 보면 가끔 if __name__ == “__main__”: 의 조건문을 보게 되는데, 그 의미에 대해서 한 번 생각해보자. 먼저 __name__ 이라는 것은 인터프리터가 실행되기전 만들어 놓는 글로벌 변수이며, 그 변수의 값으로는 __main__ 혹은 모듈의 이름이 들어간다. (여기서 모듈이란 함수나 변수 또는 클래스를 모아 놓은 파일을 말하며, 모듈은 다른 파이썬 프로그램에서 import하여 사용할 수 있게끔 만든 파이썬 파일이라고도 할 수 있다.) 다시말해, 파이썬 인터프리터가 최초로 실행한 스크립트 파일의 __name__에는 __main__이 들어가며 모듈로써 실행되는 파일의 __name__에는 해당 모듈의 이름이 들어가는 것이다. 다음의 예를 통해서 이 말의 의미를 정확하게 이해할 수 있을 것이다.]]></summary></entry><entry><title type="html">input()과 sys.stdin.readline()의 차이</title><link href="https://junho960913.github.io/jekyll-theme-yat/python/algorithm/2022/02/27/input_readline.html" rel="alternate" type="text/html" title="input()과 sys.stdin.readline()의 차이" /><published>2022-02-27T00:00:00+00:00</published><updated>2022-02-27T00:00:00+00:00</updated><id>https://junho960913.github.io/jekyll-theme-yat/python/algorithm/2022/02/27/input_readline</id><content type="html" xml:base="https://junho960913.github.io/jekyll-theme-yat/python/algorithm/2022/02/27/input_readline.html"><![CDATA[<p>​	코딩 테스트에 있어서, 반복문으로 입력을 여러줄 받아야하는 경우 단순히 input()을 이용하면 시간 초과가 발생할 수 있다.</p>

<p>따라서 입력을 빠르게 받기위한 방법으로 sys.stdin.readline()을 이용한다. 아래 문제를 참고해보도록 하자.</p>

<p><img src="https://k.kakaocdn.net/dn/ddxkR1/btrmnneW6Sv/FxvXGiQEaAKL1Fc7RfF381/img.png" alt="img" /></p>

<p>​	위의 문제에서 볼 수 있는 것처럼 여러 줄의 입력을 받아야하는 경우, input()을 이용하지 말고 sys.stdin.readline() 함수를 이용하도록 해보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>	<span class="c1"># sys 라이브러리 import
</span><span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
  <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
  <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<p>혹은 다음과 같은 방식으로 input을 sys.stdin.readline으로 새롭게 정의하여 input을 계속 이용해도 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>
<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
  <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
  <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<p>​	그런데 한가지 주의해야할 것은, sys.stdin.readline을 이용할 때 개행문자(‘\n’)도 함께 포함되어 입력되기 때문에 만약 개행문자를 없애야 하는 상황이라면 sys.stdin.readline().rstrip()을 이용하여 개행문자를 없애도록 해야한다. 위의 예에서는 int 형으로 변경하는 과정에서 개행문자가 없어지기 때문에 따로 rstrip을 해주지 않아도 된다. 하지만 다음과 같이 문자열을 받아오는 경우에는 주의하도록 하자.</p>
<p align="center">
  <img width="500" src="https://user-images.githubusercontent.com/96689787/155882458-ef20b649-bf25-4435-a23b-e6dde25e38e7.png" alt="스크린샷 2022-02-27 오후 8.24.42" />
</p>

<p>위와 같은 입력을 2차원 리스트로 받아오기 위해서 다음과 같이 코드를 작성할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">stdin</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">Board</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">input</span><span class="p">().</span><span class="n">rstrip</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="c1">#result = [['#', '#', '#', '#', '#'], ['#', '.', '.', 'B', '#'], ['#', '.', '#', '.', '#'], ['#', 'R', 'O', '.', '#'], ['#', '#', '#', '#', '#']]
</span></code></pre></div></div>

<p>하지만 만약 여기서 rstrip을 쓰지 않았다면 다음과 같은 결과가 나온다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">stdin</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>

<span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
<span class="n">Board</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="c1">#result = [['#', '#', '#', '#', '#', '\n'], ['#', '.', '.', 'B', '#', '\n'], ['#', '.', '#', '.', '#', '\n'], ['#', 'R', 'O', '.', '#', '\n'], ['#', '#', '#', '#', '#', '\n']]
</span></code></pre></div></div>

<p>따라서, 만약 sys.stdin.readline을 이용하게 된다면 개행문자 꼭 고려해야 한다.</p>]]></content><author><name>Junho960913</name></author><category term="Python" /><category term="Algorithm" /><category term="Python" /><category term="Algorithm" /><summary type="html"><![CDATA[​ 코딩 테스트에 있어서, 반복문으로 입력을 여러줄 받아야하는 경우 단순히 input()을 이용하면 시간 초과가 발생할 수 있다.]]></summary></entry><entry><title type="html">Artificial Intelligence</title><link href="https://junho960913.github.io/jekyll-theme-yat/ai/2022/02/20/ML.html" rel="alternate" type="text/html" title="Artificial Intelligence" /><published>2022-02-20T00:00:00+00:00</published><updated>2022-02-20T00:00:00+00:00</updated><id>https://junho960913.github.io/jekyll-theme-yat/ai/2022/02/20/ML</id><content type="html" xml:base="https://junho960913.github.io/jekyll-theme-yat/ai/2022/02/20/ML.html"><![CDATA[<h1 id="what-is-artificial-intelligence">What is Artificial Intelligence?</h1>
<t>In recent years, almost everyone whose major is CS or even seems like not actually related to computers is talking about, or studying Artificial Intelligence(AI). In this era AI, I think it is really important to distinguish what is AI, Machine Learning(ML), and Deep Learning(DL). AI represents any technique that enables computers to mimic human behavior, ML means an ability to learn without explicitly being programmed, and DL is extracting patterns from data using deep neural networks.
</t>]]></content><author><name>Junho960913</name></author><category term="AI" /><category term="AI" /><summary type="html"><![CDATA[What is Artificial Intelligence? In recent years, almost everyone whose major is CS or even seems like not actually related to computers is talking about, or studying Artificial Intelligence(AI). In this era AI, I think it is really important to distinguish what is AI, Machine Learning(ML), and Deep Learning(DL). AI represents any technique that enables computers to mimic human behavior, ML means an ability to learn without explicitly being programmed, and DL is extracting patterns from data using deep neural networks.]]></summary></entry></feed>